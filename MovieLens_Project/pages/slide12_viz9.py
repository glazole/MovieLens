from dash import html, dcc
import plotly.express as px
import pandas as pd
import ast

def get_layout(data):
    df = data["movies_total"]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    df['runtimeMinutes_imdb'] = pd.to_numeric(df['runtimeMinutes_imdb'], errors='coerce')

    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∂–∞–Ω—Ä–æ–≤
    df = df.dropna(subset=['runtimeMinutes_imdb', 'genres_ml']).copy()

    # –ü–∞—Ä—Å–∏–º –∂–∞–Ω—Ä—ã
    def parse_genres(val):
        try:
            genres = ast.literal_eval(val)
            if isinstance(genres, list):
                return genres
        except:
            pass
        if isinstance(val, str) and "|" in val:
            return val.split("|")
        return []

    df['genres_ml'] = df['genres_ml'].apply(parse_genres)

    # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ –∂–∞–Ω—Ä–∞–º
    exploded = df.explode('genres_ml')
    exploded = exploded.dropna(subset=['genres_ml'])

    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∂–∞–Ω—Ä–∞—Ö
    exploded = exploded[exploded['genres_ml'].str.strip() != ""]

    # One-hot encoding
    genre_dummies = pd.get_dummies(exploded['genres_ml'])

    if genre_dummies.empty or exploded['runtimeMinutes_imdb'].isna().all():
        return html.Div([
            html.H2("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∂–∞–Ω—Ä–∞–º–∏ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å–º–∞", className="slide-title"),
            html.P("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞."),
            html.Div("13", className="page-number"),
            html.Div([
                dcc.Link("‚ùÆ", href="/slide12", className="circle-nav-btn prev"),
                dcc.Link("‚ùØ", href="/slide14", className="circle-nav-btn next")
            ], className="circle-nav-container")
        ])

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º
    matrix = pd.concat([genre_dummies, exploded['runtimeMinutes_imdb']], axis=1)

    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    correlation = matrix.corr(numeric_only=True).round(2)
    correlation_to_runtime = correlation[['runtimeMinutes_imdb']].drop('runtimeMinutes_imdb')

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    fig = px.imshow(
        correlation_to_runtime,
        text_auto=True,
        aspect='auto',
        color_continuous_scale='RdBu_r',
        title='üé¨ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å–º–∞ –∏ –∂–∞–Ω—Ä–æ–≤'
    )

    fig.update_layout(
        xaxis_title='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç—ã)',
        yaxis_title='–ñ–∞–Ω—Ä—ã',
        height=700
    )

    return html.Div([
        html.H2("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∂–∞–Ω—Ä–∞–º–∏ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å–º–∞", className="slide-title"),
        html.Hr(),
        dcc.Graph(figure=fig),
        html.Div("12", className="page-number"),
        html.Div([
            dcc.Link("‚ùÆ", href="/slide11", className="circle-nav-btn prev"),
            dcc.Link("‚ùØ", href="/slide13", className="circle-nav-btn next")
        ], className="circle-nav-container")
    ])
